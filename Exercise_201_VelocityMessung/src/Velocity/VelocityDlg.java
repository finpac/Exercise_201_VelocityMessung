package Velocity;

import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;

/**
 *
 * @author Patrick Fink
 */
public class VelocityDlg extends javax.swing.JDialog
{
    private boolean ok;
    private Measurement element;

    public VelocityDlg(java.awt.Frame parent, boolean modal)
    {
        super(parent, modal);
        initComponents();
        ok = false;
        element = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plOverlay = new javax.swing.JPanel();
        lbDatum = new javax.swing.JLabel();
        tfDatum = new javax.swing.JTextField();
        lbUhrzeit = new javax.swing.JLabel();
        tfUhrzeit = new javax.swing.JTextField();
        lbKennzeichen = new javax.swing.JLabel();
        tfKennzeichen = new javax.swing.JTextField();
        lbGemessen = new javax.swing.JLabel();
        tfGemessen = new javax.swing.JTextField();
        lbErlaubt = new javax.swing.JLabel();
        tfErlaubt = new javax.swing.JTextField();
        plOverlaySouth = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Eingabedialog");

        plOverlay.setLayout(new java.awt.GridLayout(0, 2));

        lbDatum.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbDatum.setText("Datum:");
        plOverlay.add(lbDatum);

        tfDatum.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfDatum.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfDatum.setText("08.10.2013");
        plOverlay.add(tfDatum);

        lbUhrzeit.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbUhrzeit.setText("Uhrzeit:");
        plOverlay.add(lbUhrzeit);

        tfUhrzeit.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfUhrzeit.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfUhrzeit.setText("07:55");
        plOverlay.add(tfUhrzeit);

        lbKennzeichen.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbKennzeichen.setText("Kennzeichen:");
        plOverlay.add(lbKennzeichen);

        tfKennzeichen.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfKennzeichen.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfKennzeichen.setText("GU-RASER1");
        plOverlay.add(tfKennzeichen);

        lbGemessen.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbGemessen.setText("V-Gemessen:");
        plOverlay.add(lbGemessen);

        tfGemessen.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfGemessen.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfGemessen.setText("123");
        plOverlay.add(tfGemessen);

        lbErlaubt.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbErlaubt.setText("V-Erlaubt:");
        plOverlay.add(lbErlaubt);

        tfErlaubt.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tfErlaubt.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        tfErlaubt.setText("80");
        plOverlay.add(tfErlaubt);

        getContentPane().add(plOverlay, java.awt.BorderLayout.CENTER);

        plOverlaySouth.setLayout(new java.awt.GridLayout(1, 0));

        btnAdd.setText("Ãœbernehmen");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onOk(evt);
            }
        });
        plOverlaySouth.add(btnAdd);

        btnExit.setText("Abbrechen");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onCancel(evt);
            }
        });
        plOverlaySouth.add(btnExit);

        getContentPane().add(plOverlaySouth, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void onOk(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onOk
    {//GEN-HEADEREND:event_onOk
        String inDatum = tfDatum.getText();
        String inUhrzeit = tfUhrzeit.getText();
        String kennzeichen = tfKennzeichen.getText();
        String inGemessen = tfGemessen.getText();
        String inErlaubt = tfErlaubt.getText();
        try
        {
            DateTimeFormatter format = DateTimeFormatter.ofPattern("dd.MM.yyyy");
            LocalTime uhrzeit;
            LocalDate datum;
            int gemessen;
            int erlaubt;

            try
            {
                datum = LocalDate.parse(inDatum, format);
            } catch (Exception e)
            {
                throw new Exception("Das Datum muss im Format dd.mm.jjjj liegen.");
            }

            format = DateTimeFormatter.ofPattern("H:mm");

            try
            {
                uhrzeit = LocalTime.parse(inUhrzeit, format);
            } catch (Exception e)
            {
                throw new Exception("Die Uhrzeit muss im Format hh:mm liegen.");
            }

            try
            {
                gemessen = Integer.parseInt(inGemessen);
            } catch (NumberFormatException e)
            {
                throw new Exception("Der V-Gemessen Wert muss eine Ganzzahl sein.");
            }

            try
            {
                erlaubt = Integer.parseInt(inErlaubt);
            } catch (NumberFormatException e)
            {
                throw new Exception("Der V-Erlaubt Wert muss eine Ganzzahl sein.");
            }

            element = new Measurement(datum, uhrzeit, kennzeichen, gemessen, erlaubt);
            ok = true;
            this.setVisible(false);
        } catch (Exception e)
        {
            ok = false;
            JOptionPane.showMessageDialog(this, e.getMessage(), "Fehler", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_onOk

    private void onCancel(java.awt.event.ActionEvent evt)//GEN-FIRST:event_onCancel
    {//GEN-HEADEREND:event_onCancel
        ok = false;
        this.setVisible(false);
    }//GEN-LAST:event_onCancel

    /**
     * @return das neu erstellte Element
     */
    public Measurement getElement()
    {
        return element;
    }

    /**
     * @return den Status des Dialogs
     */
    public boolean isOK()
    {
        return ok;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(VelocityDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(VelocityDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(VelocityDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(VelocityDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                VelocityDlg dialog = new VelocityDlg(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter()
                {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e)
                    {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnExit;
    private javax.swing.JLabel lbDatum;
    private javax.swing.JLabel lbErlaubt;
    private javax.swing.JLabel lbGemessen;
    private javax.swing.JLabel lbKennzeichen;
    private javax.swing.JLabel lbUhrzeit;
    private javax.swing.JPanel plOverlay;
    private javax.swing.JPanel plOverlaySouth;
    private javax.swing.JTextField tfDatum;
    private javax.swing.JTextField tfErlaubt;
    private javax.swing.JTextField tfGemessen;
    private javax.swing.JTextField tfKennzeichen;
    private javax.swing.JTextField tfUhrzeit;
    // End of variables declaration//GEN-END:variables
}
